{"version":3,"sources":["Components/Formtext.js","Components/Navbar.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Formtext","props","useState","text","setText","className","style","color","mode","Heading","background","value","onChange","event","console","log","target","id","rows","onClick","newText","toUpperCase","showAlert","toLowerCase","charAt","substr","split","filter","element","length","Navbar","href","title","type","toggleMode","htmlFor","defaultProps","aboutText","Alert","alert","class","role","msg","App","setmode","setAlert","message","setTimeout","document","body","backgroundColor","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.06418fd5.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function Formtext(props) {\r\n const handleupClick= ()=>{\r\n  //  console.log('uppercase was clicked'+text )\r\n   let newText = text.toUpperCase();\r\n  //  jab koi button par click karega to newtext jo hoga wo uppercase hoga\r\n   setText(newText)\r\n   props.showAlert('Converted to Uppercase', 'Success')\r\n }\r\n const handleLoClick= ()=>{\r\n   let newText = text.toLowerCase();\r\n   setText(newText)\r\n   props.showAlert('Converted to Lowercase', 'Success')\r\n\r\n }\r\n const handleclearClick= ()=>{\r\n   let newText = '';\r\n   setText(newText)\r\n   props.showAlert('Text has been Cleared', 'Success')\r\n\r\n }\r\n const handleTitleClick= ()=>{\r\n   let newText = text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()  ;\r\n   setText(newText)\r\n   props.showAlert('Converted to Title', 'Success')\r\n\r\n }\r\n//  without event we cant write in the text area\r\n//  hum event ke bina setText means jo hamari value ko update karta ha wo update nhi kar pata means ki hum (hum likh nhi pate means ki    setText(event.target.value) yah hamari write ki value ko sath sath update karta hai which is display us means onchange hame dikhta hai   )\r\n const handleOnChange= (event)=>{\r\n   console.log('on change' )\r\n \r\n   setText(event.target.value)\r\n }\r\n// here set text is define to update to the value and text is for the defualt value\r\n const [text, setText] = useState('default text value');\r\n\r\n    return (\r\n       <>\r\n       <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}} >\r\n         \r\n       <div className='my-4'   >\r\n\r\n      <h1>{props.Heading} </h1>\r\n<div className=\"mb-3 my-3 \">\r\n  <textarea className=\"form-control  \"  style={{background:props.mode==='dark'?'#54546e':'white' , color:props.mode==='dark'?'white':'black' }} value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary my-2 mx-2\" onClick={handleupClick} >switch to uppercase</button>\r\n<button className=\"btn btn-primary my-2 mx-2\" onClick={handleLoClick} >switch to lowercase</button>\r\n<button className=\"btn btn-primary my-2 mx-2\" onClick={handleTitleClick} >switch to Title</button>\r\n<button className=\"btn btn-primary my-2 mx-2\" onClick={handleclearClick} >Clear</button>\r\n       </div>\r\n\r\n<h2>Your text summery</h2>\r\n<p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters </p>\r\n<p> {0.008*text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes to read the text </p>\r\n<h2>Preview</h2>\r\n<p>{text} </p>\r\n       </div>\r\n       </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\"> {props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n              </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} `}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" type=\"checkbox\" />\r\n            <label className=\"form-check-lable\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n// yha ham prop ke type ko declare karte hai ki iska title ka prop type kya hoga\r\n// and isRequired means ki if hum by chance ham bhul jate hai title declare karna to hume error show hoga\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string.isRequired,\r\n}\r\n// if we do'nt pass the props manually so the default props are execute automatically\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutText: 'default text'\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n      props.alert &&  <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n       {props.alert.type}: {props.alert.msg}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./Components/About\";\nimport Formtext from \"./Components/Formtext\";\nimport Navbar from \"./Components/Navbar\";\nimport React, { useState } from 'react'\nimport Alert from \"./Components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message , type)=>{\n    setAlert({\n      msg: message,\n      type: type\n        })\n          setTimeout(() => {\n        setAlert(null)\n      }, 1500);\n  }\n  const toggleMode = ()=>{\n    if (mode==='light') {\n      setmode('dark');\n      document.body.style.backgroundColor = \"#434362\";\n      showAlert('dark mode has been enabled ','Success' )\n    }\n    else{\n\n      setmode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert('light mode has been enabled ','Success' )\n\n    }\n  }\n  return (\n    <> \n    \n    {/* <Router> */}\n      <Navbar title=\"My first app\" aboutText=\"about text\" mode= {mode} //variable mode pass karvaya hai so don't use backticks\n       toggleMode={toggleMode} />\n      {/* <Navbar  /> */}\n     <div className=\"container\" style={{height:\"56px\"}} >\n       <Alert alert={alert} />  {/* ye alert setalert wala alert hai jiski initial valua is null jo aage props me pass hoga */}\n      \n       </div> \n      {/* <div className=\"container\">  */}\n\n      {/* <Switch>\n          <Route path=\"/about\">\n            <About  mode= {mode} />\n          </Route>\n        \n          <Route path=\"/\">\n          \n          </Route>\n        </Switch> */}\n      {/* </div> */}\n      <div className=\"container\">\n        <Formtext showAlert={showAlert} Heading=\"Enter the text to analyse below\" mode={mode} />\n      \n      </div>\n        {/* </Router> */}\n  \n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}